Discussion
----------

1. Which would be the most efficient data structure for a data set with the following
requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Answer:
     In a doubly linked list, the runtime for adding and removing items to the beginning as well as the end is O(1). This is because of the usage of two pointers - previous and next, which provides more flexibility in identifying the first and the last nodes more efficiently.
     Hence, for the above requirements, doubly-linked list is the most efficient data structure.


2. Which would be the most efficient data structure for a data set with the following
requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

 Answer:
  In a dictionary, the keys are hashed and stored in memory. To find a particular key in a dictionary, simply looking up the index matching the hashed key is enough; and no traversing is required. Hence, order is unimportant, and the runtime for searching an item and adding / removing from any location is O(1). 
  Thus, dictionaries are the most efficient data structures for the above requirements



3. Explain why looking up, adding elements, and removing elements from a dictionary
or hash map are all O(1) operations.
Answer:
  In a dictionary, the keys are hashed and stored in memory. Hence to find an element, simply looking for the specific index matching the hashed key is enough, and no traversing is required. Hence, looking up, adding elements, and removing elements from a dictionary or hash map are all O(1) operations.



4. Explain why removing elements from or adding elements to an arbitrary location in
a Python list are O(n) operations.
Answer:
  In a python list, the pointers to the elements are stored in contiguous spaces in memory. Hence, adding or removing elements from an arbitrary location requires changing the pointers of every element after the added / removed item until the end of the list. This re-adjustments of other pointers inside the memory location makes the runtime of adding / removing from an arbitrary location as O(n).



5. What is the correct runtime for:

  - Bubble Sort? : O(n^2)

  - Quicksort? : O( n log n)

  - Merge Sort? : O(n log n)

  - Insertion Sort?: O(n log n)


6. What is the difference between a tree and a graph?
  Trees are unidirectional data structures, with parent-child relationship between nodes. Trees are acyclic in nature.

  Graphs can be unidirectional, or undirected where nodes connected to each other by an edge are called as adjacent to each other. Graphs can be cyclic in nature.



7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

  Answer: Assuming a random pivot of item '6', from the list. Below are the function when the list is initially called.

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 5

    - lo - [4, 1, 2, 3]

    - hi - [8, 6, 7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:
  Answer: From the above 'lo' list, assuming '2' is the pivot element. Below are the values.

  - lst - [4, 1, 2, 3]

  - pivot - 2

  - lo - [1]

  - hi - [3, 4]
